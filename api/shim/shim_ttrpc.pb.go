// Code generated by protoc-gen-go-ttrpc. DO NOT EDIT.
// source: shim.proto
package task

import (
	context "context"
	ttrpc "github.com/containerd/ttrpc"
)

type TaskService interface {
	Start(context.Context, *StartRequest) (*StartResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
}

func RegisterTaskService(srv *ttrpc.Server, svc TaskService) {
	srv.RegisterService("task.Task", &ttrpc.ServiceDesc{
		Methods: map[string]ttrpc.Method{
			"Start": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req StartRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.Start(ctx, &req)
			},
			"Delete": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req DeleteRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.Delete(ctx, &req)
			},
		},
	})
}

type taskClient struct {
	client *ttrpc.Client
}

func NewTaskClient(client *ttrpc.Client) TaskService {
	return &taskClient{
		client: client,
	}
}

func (c *taskClient) Start(ctx context.Context, req *StartRequest) (*StartResponse, error) {
	var resp StartResponse
	if err := c.client.Call(ctx, "task.Task", "Start", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *taskClient) Delete(ctx context.Context, req *DeleteRequest) (*DeleteResponse, error) {
	var resp DeleteResponse
	if err := c.client.Call(ctx, "task.Task", "Delete", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}
