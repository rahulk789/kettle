
syntax = "proto3";

package task;

import "google/protobuf/any.proto";

option go_package = "./;task";

// Shim service is launched for each container and is responsible for owning the IO
// for the container and its additional processes.  The shim is also the parent of
// each container and allows reattaching to the IO and receiving the exit status
// for the container processes.
service Task {
//	rpc State(StateRequest) returns (StateResponse);
	rpc Start(StartRequest) returns (StartResponse);
	rpc Delete(DeleteRequest) returns (DeleteResponse);
//	rpc Pids(PidsRequest) returns (PidsResponse);
//	rpc Pause(PauseRequest) returns (google.protobuf.Empty);
//	rpc Resume(ResumeRequest) returns (google.protobuf.Empty);
//	rpc Checkpoint(CheckpointTaskRequest) returns (google.protobuf.Empty);
//	rpc Kill(KillRequest) returns (google.protobuf.Empty);
//	rpc Exec(ExecProcessRequest) returns (google.protobuf.Empty);
//	rpc ResizePty(ResizePtyRequest) returns (google.protobuf.Empty);
//	rpc CloseIO(CloseIORequest) returns (google.protobuf.Empty);
//	rpc Update(UpdateTaskRequest) returns (google.protobuf.Empty);
//	rpc Wait(WaitRequest) returns (WaitResponse);
//	rpc Stats(StatsRequest) returns (StatsResponse);
//	rpc Connect(ConnectRequest) returns (ConnectResponse);
//	rpc Shutdown(ShutdownRequest) returns (google.protobuf.Empty);
}
message StartRequest {
	string container_id = 1;
	string exec_id = 2;
}
message StartResponse {
	uint32 pid = 1;
}
message DeleteRequest {
	string id = 1;
}
message DeleteResponse {
	string id = 1;
}
message CreateTaskRequest {
	string id = 1;
	string bundle = 2;
	bool terminal = 4;
	string stdin = 5;
	string stdout = 6;
	string stderr = 7;
	string checkpoint = 8;
	string parent_checkpoint = 9;
	google.protobuf.Any options = 10;
}

message CreateTaskResponse {
	uint32 pid = 1;
}

